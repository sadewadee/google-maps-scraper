# Enterprise Kubernetes Deployment for Google Maps Scraper
# Optimized for 1M+ data points and 24/7 operations

apiVersion: v1
kind: Namespace
metadata:
  name: gmaps-scraper-enterprise
  labels:
    name: gmaps-scraper-enterprise

---
# ConfigMap for enterprise configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: enterprise-config
  namespace: gmaps-scraper-enterprise
data:
  config.yaml: |
    scaling:
      max_concurrency: 100
      batch_size: 1000
      worker_pool_size: 50
    database:
      max_connections: 100
      connection_pool_size: 20
    monitoring:
      enabled: true
      metrics_port: 9090

---
# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: gmaps-scraper-enterprise
type: Opaque
data:
  # Base64 encoded values - replace with actual credentials
  username: cG9zdGdyZXM=  # postgres
  password: cGFzc3dvcmQ=  # password
  host: cG9zdGdyZXMtY2x1c3Rlcg==  # postgres-cluster

---
# Deployment for the scraper application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gmaps-scraper-enterprise
  namespace: gmaps-scraper-enterprise
  labels:
    app: gmaps-scraper
    tier: enterprise
spec:
  replicas: 20  # Scale based on workload
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 5
      maxUnavailable: 2
  selector:
    matchLabels:
      app: gmaps-scraper
      tier: enterprise
  template:
    metadata:
      labels:
        app: gmaps-scraper
        tier: enterprise
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: scraper
        image: gmaps-scraper:enterprise-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: CONCURRENCY
          value: "100"
        - name: BATCH_SIZE
          value: "1000"
        - name: MAX_MEMORY
          value: "3Gi"
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: host
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: CONFIG_PATH
          value: "/etc/config/config.yaml"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "2Gi"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: temp-storage
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: enterprise-config
      - name: temp-storage
        emptyDir:
          sizeLimit: "1Gi"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - gmaps-scraper
              topologyKey: kubernetes.io/hostname

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gmaps-scraper-hpa
  namespace: gmaps-scraper-enterprise
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gmaps-scraper-enterprise
  minReplicas: 10
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Service for load balancing
apiVersion: v1
kind: Service
metadata:
  name: gmaps-scraper-service
  namespace: gmaps-scraper-enterprise
  labels:
    app: gmaps-scraper
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: gmaps-scraper
    tier: enterprise

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gmaps-scraper-ingress
  namespace: gmaps-scraper-enterprise
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  rules:
  - host: gmaps-scraper.enterprise.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gmaps-scraper-service
            port:
              number: 80

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: gmaps-scraper-metrics
  namespace: gmaps-scraper-enterprise
  labels:
    app: gmaps-scraper
spec:
  selector:
    matchLabels:
      app: gmaps-scraper
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gmaps-scraper-pdb
  namespace: gmaps-scraper-enterprise
spec:
  minAvailable: 5
  selector:
    matchLabels:
      app: gmaps-scraper
      tier: enterprise

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: gmaps-scraper-netpol
  namespace: gmaps-scraper-enterprise
spec:
  podSelector:
    matchLabels:
      app: gmaps-scraper
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: postgres-system
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: UDP
      port: 53